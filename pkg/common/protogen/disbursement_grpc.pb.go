// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: disbursement.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DisbursementService_Disburse_FullMethodName = "/DisbursementService/Disburse"
)

// DisbursementServiceClient is the client API for DisbursementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DisbursementServiceClient interface {
	Disburse(ctx context.Context, in *DisburseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type disbursementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDisbursementServiceClient(cc grpc.ClientConnInterface) DisbursementServiceClient {
	return &disbursementServiceClient{cc}
}

func (c *disbursementServiceClient) Disburse(ctx context.Context, in *DisburseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DisbursementService_Disburse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DisbursementServiceServer is the server API for DisbursementService service.
// All implementations should embed UnimplementedDisbursementServiceServer
// for forward compatibility
type DisbursementServiceServer interface {
	Disburse(context.Context, *DisburseRequest) (*emptypb.Empty, error)
}

// UnimplementedDisbursementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDisbursementServiceServer struct {
}

func (UnimplementedDisbursementServiceServer) Disburse(context.Context, *DisburseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disburse not implemented")
}

// UnsafeDisbursementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DisbursementServiceServer will
// result in compilation errors.
type UnsafeDisbursementServiceServer interface {
	mustEmbedUnimplementedDisbursementServiceServer()
}

func RegisterDisbursementServiceServer(s grpc.ServiceRegistrar, srv DisbursementServiceServer) {
	s.RegisterService(&DisbursementService_ServiceDesc, srv)
}

func _DisbursementService_Disburse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisburseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DisbursementServiceServer).Disburse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DisbursementService_Disburse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DisbursementServiceServer).Disburse(ctx, req.(*DisburseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DisbursementService_ServiceDesc is the grpc.ServiceDesc for DisbursementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DisbursementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DisbursementService",
	HandlerType: (*DisbursementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disburse",
			Handler:    _DisbursementService_Disburse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "disbursement.proto",
}
